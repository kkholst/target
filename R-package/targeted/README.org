#+TITLE: Targeted inference (targeted)
#+AUTHOR: Klaus K. Holst
#+PROPERTY: header-args:python :session :results value
#+PROPERTY: header-args:julia :session *julia*
#+PROPERTY: header-args:R :session *R* :cache no :width 550 :height 450
#+PROPERTY: header-args:R+ :colnames yes :rownames no :hlines yes
#+PROPERTY: header-args :eval never-export :exports both :results output :tangle yes :comments yes
#+OPTIONS: timestamp:nil title:t date:t author:t creator:nil toc:nil
#+OPTIONS: h:4 num:t tags:nil d:t ^:{}

#+HTML: <a href="https://travis-ci.org/kkholst/targeted"><img src="https://travis-ci.org/kkholst/targeted.svg?branch=master"></a>
#+HTML: <a href="https://codecov.io/github/kkholst/targeted?branch=master"><img src="https://codecov.io/github/kkholst/targeted/coverage.svg?branch=master"></a>
#+HTML: <a href="http://cran.rstudio.com/web/packages/targeted/index.html"><img src="http://www.r-pkg.org/badges/version/targeted"></a>
#+HTML: <a href="http://cranlogs.r-pkg.org/downloads/total/last-month/targeted"><img src="http://cranlogs.r-pkg.org/badges/targeted"></a>

** Installation

The development version can be installed directly from =github=:
#+BEGIN_SRC R :exports both :eval never
remotes::install_github("kkholst/targeted")
#+END_SRC

** Examples

*** Targeted risk regression
#+BEGIN_SRC R
  library(targeted)
  library(magrittr)
#+END_SRC

Simulate some data:

#+BEGIN_SRC R :exports both :results output
m <- lvm() %>%
    regression(a ~ x+z) %>%
    regression(lp.target ~ 1) %>%
    regression(lp.nuisance ~ x + z) %>%
    distribution('a', binomial.lvm("logit")) %>%
    binomial.rr('y', 'a', 'lp.target', 'lp.nuisance')

par <- c('a'=-2, 'lp.target'=1, 'lp.nuisance'=-1, 'lp.nuisance~x'=2)
d <- lava::sim(m, n=1e4, seed=1, p=par) %>%
    subset(select=c('y', 'a','x','z'))

head(d)
#+END_SRC

#+RESULTS:
:
:   y a          x          z
: 1 0 0 -0.6264538 -0.8043316
: 2 0 0  0.1836433 -1.0565257
: 3 0 0 -0.8356286 -1.0353958
: 4 0 0  1.5952808 -1.1855604
: 5 1 0  0.3295078 -0.5004395
: 6 0 0 -0.8204684 -0.5249887


#+BEGIN_SRC R :exports both :results output
  fit <- riskreg(y ~ a, nuisance=~x+z, data=d, type="rr")
  fit
#+END_SRC

#+RESULTS:
:             Estimate Std.Err   2.5% 97.5%    P-value
: (Intercept)   0.9722 0.02896 0.9155 1.029 4.281e-247

Here the same design matrix is used for both the propensity model and
the nuisance parameter (odds-product) model

#+BEGIN_SRC R :exports both
summary(fit)
#+END_SRC

#+RESULTS:
#+begin_example
riskreg(formula = y ~ a | 1 | x+z, data = d, type = "rr")

Relative risk model
  Response:  y
  Exposure:  a

             Estimate Std.Err    2.5%   97.5%    P-value
log(RR):
 (Intercept)   0.9722 0.02896  0.9155  1.0290 4.281e-247
log(OP):
 (Intercept)  -0.9636 0.06603 -1.0930 -0.8342  3.072e-48
 x             2.0549 0.07901  1.9000  2.2098 4.182e-149
 z             1.0329 0.06728  0.9010  1.1648  3.468e-53
logit(Pr):
 (Intercept)  -1.9753 0.05631 -2.0856 -1.8649 1.284e-269
 x             0.9484 0.04186  0.8664  1.0305 1.235e-113
 z             1.0336 0.04878  0.9380  1.1292  1.187e-99
#+end_example

Double-robustness illustrated by using a wrong propensity
model but a correct nuisance paramter (odds-product) model:
#+BEGIN_SRC R :exports both :results output
  riskreg(y ~ a, nuisance=~x+z, propensity=~z, data=d, type="rr")
#+END_SRC

#+RESULTS:
:             Estimate Std.Err   2.5% 97.5%    P-value
: (Intercept)   0.9709 0.02893 0.9142 1.028 7.053e-247

Or vice-versa
#+BEGIN_SRC R :exports both :results output
  riskreg(y ~ a, nuisance=~z, propensity=~x+z, data=d, type="rr")
#+END_SRC

#+RESULTS:
:             Estimate Std.Err   2.5% 97.5%    P-value
: (Intercept)   0.9931 0.03597 0.9226 1.064 8.286e-168

Whereas the MLE yields a biased estimate of the relative risk:
#+BEGIN_SRC R
  fit_mle <- with(d, riskreg_mle(y, a, x1=model.matrix(~1,d), x2=model.matrix(~z, d)))
  estimate(fit_mle, 1)
#+END_SRC

#+RESULTS:
:
:      Estimate Std.Err  2.5% 97.5% P-value
: [p1]    1.289 0.02855 1.233 1.345       0
:
:  Null Hypothesis:
:   [p1] = 0


To obtain an estimate of the risk-difference (here wrong model) we simply chance the =type= argument

#+BEGIN_SRC R
riskreg(y ~ a, nuisance=~x+z, data=d, type="rd")
#+END_SRC

#+RESULTS:
:             Estimate Std.Err   2.5%  97.5%    P-value
: (Intercept)   0.5102 0.01613 0.4786 0.5418 1.135e-219


*** Interactions

Interactions with the exposure can be examined with the =target= argument

#+BEGIN_SRC R
riskreg(y ~ a, target=a~x, nuisance=~x+z, data=d, type="rr")
#+END_SRC

#+RESULTS:
:             Estimate Std.Err    2.5%    97.5%    P-value
: (Intercept)   1.0241 0.03659  0.9524  1.09584 1.986e-172
: x            -0.0825 0.03469 -0.1505 -0.01451  1.739e-02
